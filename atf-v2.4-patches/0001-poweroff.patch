diff -Naurp atf-source-v2.4.orig/plat/rockchip/rk3399/drivers/pmu/pmu.c atf-source-v2.4.patched/plat/rockchip/rk3399/drivers/pmu/pmu.c
--- atf-source-v2.4.orig/plat/rockchip/rk3399/drivers/pmu/pmu.c	2020-12-21 12:11:28.724340934 +0100
+++ atf-source-v2.4.patched/plat/rockchip/rk3399/drivers/pmu/pmu.c	2020-12-21 12:15:51.894331701 +0100
@@ -31,6 +31,7 @@
 #include <secure.h>
 #include <soc.h>
 #include <suspend.h>
+#include <i2c_regs.h>
 
 DEFINE_BAKERY_LOCK(rockchip_pd_lock);
 
@@ -1517,43 +1518,486 @@ int rockchip_soc_sys_pwr_dm_resume(void)
 	return 0;
 }
 
-void __dead2 rockchip_soc_soft_reset(void)
+/*
+ * Init I2C bus 0. The RK808 is connected to it
+ *
+ * GPIO1_B7 / GPIO1_C0
+ */
+#define I2C0_TUNING	0x00000200
+#define	I2C0_DIVIDER	0x00130020
+#define I2C0_MAIN_DIVIDER	 3
+
+void rockchip_init_i2c0() {
+	int i;
+
+	/* Stop ABP bus clock for I2C0 */
+	mmio_write_32(PMUCRU_BASE + CRU_PMU_CLKGATE_CON(1), 0x00800000); /* Gate clock to I2C0 */
+
+	/* Stop function clock */
+	mmio_write_32(PMUCRU_BASE + CRU_PMU_CLKGATE_CON(0), 0x02000000); /* Gate clock to I2C0 */
+
+	/* Wait for all registers to be written */
+	dsb();
+
+	/* Configure I2C0 divider */
+	mmio_write_32(PMUCRU_BASE + PMUCRU_CLKSEL_OFFSET + 2 * 4,0x007F0000 | I2C0_MAIN_DIVIDER); /* Clock divider for I2C0 module */
+
+	/* Wait for all registers to be written */
+	dsb();
+
+	/* Start ABP bus clock for I2C0 */
+	mmio_write_32(PMUCRU_BASE + CRU_PMU_CLKGATE_CON(1), 0x00800000); /* Release clock to I2C0 */
+
+	/* Start function clock */
+	mmio_write_32(PMUCRU_BASE + CRU_PMU_CLKGATE_CON(0), 0x02000000); /* Release clock to I2C0 */
+
+	/* Wait for all registers to be written */
+	dsb();
+
+	/* Configure pin controller */
+	mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1B_P, 0xC0004000);	/* GPIO pull up */
+	mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1C_P, 0x00030001);	/* GPIO pull up */
+	mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1B_IOMUX, 0xC0008000);	/* Select I2C function for GPIO 1 B7 */
+	mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1C_IOMUX, 0x00030002);	/* Select I2C function for GPIO 1 C0 */
+
+	/* Configure I2C controller */
+	mmio_write_32(I2C0_BASE + RKI2C_IEN, 0x00000000);		/* Disable all interrupts */
+	mmio_write_32(I2C0_BASE + RKI2C_CON, I2C0_TUNING);		/* Disable I2C module and set mode to TX only */
+	mmio_write_32(I2C0_BASE + RKI2C_IPD, 0x000000FF);		/* Clear all interrupts */
+	mmio_write_32(I2C0_BASE + RKI2C_CLKDIV, I2C0_DIVIDER);		/* Configure SCL clock to about 400kHz (should be calculated from PPLL clock) */
+
+	/* Reset other registers to their default values */
+	mmio_write_32(I2C0_BASE + RKI2C_MRXADDR, 0x00000000);
+	mmio_write_32(I2C0_BASE + RKI2C_MRXRADDR, 0x00000000);
+	mmio_write_32(I2C0_BASE + RKI2C_MTXCNT, 0x00000000);
+	mmio_write_32(I2C0_BASE + RKI2C_MRXCNT, 0x00000000);
+	mmio_write_32(I2C0_BASE + RKI2C_SCL_OE_DB, 0x00000020);
+	for (i = 0; i < 32; i+=4) {
+		mmio_write_32(I2C0_BASE + RKI2C_TXDATA0 + i, 0x00000000);
+	}
+
+	/* Wait for all registers to be written */
+	dsb();
+}
+
+/*
+ * Disable I2C0 bus
+ */
+void rockchip_stop_i2c0() {
+	/* Stop ABP bus clock for I2C0 */
+	mmio_write_32(PMUCRU_BASE + CRU_PMU_CLKGATE_CON(1), 0x00800000); /* Gate clock to I2C0 */
+
+	/* Stop function clock */
+	mmio_write_32(PMUCRU_BASE + CRU_PMU_CLKGATE_CON(0), 0x02000000); /* Gate clock to I2C0 */
+
+	/* Configure PINs as input with pull up resistor */
+	mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1B_P, 0xC0004000);	/* GPIO pull up */
+	mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1C_P, 0x00030001);	/* GPIO pull up */
+	gpio_set_direction(1 * 32 + 1 * 8 + 7, GPIO_DIR_IN);		/* GPIO 1, bank B, bit 7 */
+	gpio_set_direction(1 * 32 + 2 * 8 + 0, GPIO_DIR_IN);		/* GPIO 1, bank C, bit 0 */
+	mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1B_IOMUX, 0xC0000000);	/* Select GPIO function for GPIO 1 B7 */
+	mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1C_IOMUX, 0x00030000);	/* Select GPIO function for GPIO 1 C0 */
+
+	/* Wait for all registers to be written */
+	dsb();
+}
+
+/*
+ * Send out data on I2C0 bus
+ */
+void rockchip_tx_i2c0(const uint8_t *data, uint8_t len)
 {
-	struct bl_aux_gpio_info *rst_gpio;
+	uint32_t reg_val;
+	uint32_t to_xmit;
+	uint32_t reg_addr;
+	uint32_t do_start;
+
+	do_start = 0x08;	/* Before the first chunk of data, a start must be done */
+
+	/* Clean interrupt */
+	mmio_write_32(I2C0_BASE + RKI2C_IPD, 0x000000FF);
+
+	/* Transmit data */
+	while (len > 0) {
+		/* Fill up to 32 Bytes into transmit buffer */
+		to_xmit = 0;
+		reg_addr = I2C0_BASE + RKI2C_TXDATA0;
+		while ((len > 0) && (to_xmit < 32)) {
+			/* First byte in 32bit register */
+			reg_val = *(data++);
+			to_xmit++;
+			len--;
+			/* Second byte */
+			if (len > 0) {
+				reg_val |= *(data++) << 8;
+				to_xmit++;
+				len--;
+			}
+			/* Third byte */
+			if (len > 0) {
+				reg_val |= *(data++) << 16;
+				to_xmit++;
+				len--;
+			}
+			/* Fourth byte */
+			if (len > 0) {
+				reg_val |= *(data++) << 24;
+				to_xmit++;
+				len--;
+			}
+			mmio_write_32(reg_addr, reg_val);
+			reg_addr += 4;
+		}
 
-	rst_gpio = plat_get_rockchip_gpio_reset();
+		/* Start transmit */
+		mmio_write_32(I2C0_BASE + RKI2C_CON,I2C0_TUNING | 0x01 | do_start);
+		mmio_write_32(I2C0_BASE + RKI2C_MTXCNT, to_xmit);
+
+		/* Reset start bit */
+		do_start = 0;
+
+		/* Wait for xmit complete */
+		while (!(mmio_read_32(I2C0_BASE + RKI2C_IPD) & 0x04)) {
+			udelay(1);
+		}
 
-	if (rst_gpio) {
-		gpio_set_direction(rst_gpio->index, GPIO_DIR_OUT);
-		gpio_set_value(rst_gpio->index, rst_gpio->polarity);
-	} else {
-		soc_global_soft_reset();
+		/* Clean interrupt */
+		mmio_write_32(I2C0_BASE + RKI2C_IPD, 0x000000FF);
 	}
 
-	while (1)
-		;
+	/* Send STOP */
+	mmio_write_32(I2C0_BASE + RKI2C_CON,I2C0_TUNING | 0x11);
+
+	/* Wait for stop complete */
+	while (!(mmio_read_32(I2C0_BASE + RKI2C_IPD) & 0x20)) {
+		udelay(1);
+	}
+
+	/* Clean interrupt */
+	mmio_write_32(I2C0_BASE + RKI2C_IPD, 0x000000FF);
 }
 
-void __dead2 rockchip_soc_system_off(void)
+/*
+ * Read data from I2C0
+ */
+int rockchip_rx_i2c0(uint8_t i2c_addr, uint8_t i2c_reg, uint8_t *data, uint8_t data_len)
 {
-	struct bl_aux_gpio_info *poweroff_gpio;
+	uint32_t val;
+	uint32_t reg;
+	uint32_t status;
+
+	/* Maximum: 32 bytes */
+	if (data_len > 32) {
+		return -1;
+	}
 
-	poweroff_gpio = plat_get_rockchip_gpio_poweroff();
+	/* Reset all pending interrupts */
+	mmio_write_32(I2C0_BASE + RKI2C_IPD, 0x000000FF);
 
-	if (poweroff_gpio) {
-		/*
-		 * if use tsadc over temp pin(GPIO1A6) as shutdown gpio,
-		 * need to set this pin iomux back to gpio function
-		 */
-		if (poweroff_gpio->index == TSADC_INT_PIN) {
-			mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1A_IOMUX,
-				      GPIO1A6_IOMUX);
+	/* Configure I2C device address */
+	mmio_write_32(I2C0_BASE + RKI2C_MRXADDR, (i2c_addr << 1) | (1 << 24));
+
+	/* Configure register to read */
+	mmio_write_32(I2C0_BASE + RKI2C_MRXRADDR, i2c_reg | (1 << 24));
+
+	/* Send START */
+	mmio_write_32(I2C0_BASE + RKI2C_CON,I2C0_TUNING | 0x2B);
+
+	/* Configure number of bytes to transfer */
+	mmio_write_32(I2C0_BASE + RKI2C_MRXCNT, data_len);
+
+	/* Wait for RX complete */
+	while (!((status = mmio_read_32(I2C0_BASE + RKI2C_IPD)) & 0x08)) {
+		udelay(1);
+	}
+
+	/* Clean interrupt */
+	mmio_write_32(I2C0_BASE + RKI2C_IPD, 0x000000FF);
+
+	/* Send STOP */
+	mmio_write_32(I2C0_BASE + RKI2C_CON,I2C0_TUNING | 0x11);
+
+	/* Read out data */
+	reg = I2C0_BASE + RKI2C_RXDATA0;
+	while (data_len > 0) {
+		val = mmio_read_32(reg);
+		reg += 4;
+
+		*(data++) = val & 0xFF;
+		data_len--;
+
+		if (data_len > 0) {
+			*(data++) = (val >> 8) & 0xFF;
+			data_len--;
+
+			if (data_len > 0) {
+				*(data++) = (val >> 16) & 0xFF;
+				data_len--;
+
+				if (data_len > 0) {
+					*(data++) = (val >> 24) & 0xFF;
+					data_len--;
+				}
+			}
+		}
+	}
+
+	/* Wait for stop complete */
+	while (!(mmio_read_32(I2C0_BASE + RKI2C_IPD) & 0x20)) {
+		udelay(1);
+	}
+
+	/* Clean interrupt */
+	mmio_write_32(I2C0_BASE + RKI2C_IPD, 0x000000FF);
+
+	/* Failed due to NAK */
+	if (status & 0x40) {
+		return -1;
+	}
+
+	return 0;
+}
+
+/*
+ * Switch power off via RK808.
+ *
+ * I2C0 must be initialized.
+ *
+ * Any other peripherals should be switched off before.
+ *
+ */
+#define RK808_I2C_ADDRESS	0x1B
+void rockchip_rk808_poweroff(void)
+{
+	uint8_t val;
+	uint8_t cmd[6];
+
+	/* Configure address for write commands */
+	cmd[0] = RK808_I2C_ADDRESS << 1;
+
+	/* Read RTC interrupt register */
+	if (rockchip_rx_i2c0(RK808_I2C_ADDRESS, 0x12, &val, 1) == 0) {
+
+		/* Keep only interrupt on alarm */
+		cmd[1] = 0x12;
+		cmd[2] = val & (1 << 3);
+		rockchip_tx_i2c0(cmd, 3);
+	}
+
+	/* Read interrupt mask register 1 */
+	if (rockchip_rx_i2c0(RK808_I2C_ADDRESS, 0x4D, &val, 1) == 0) {
+
+		/* Reset and mask all interrupts except irq on alarm */
+		cmd[1] = 0x4C;
+		cmd[2] = 0x7F;
+		cmd[3] = val & (1 << 5);
+		cmd[4] = 0x03;
+		cmd[5] = 0x03;
+		rockchip_tx_i2c0(cmd, 6);
+	}
+
+	/* Power off */
+	cmd[1] = 0x4B;
+	cmd[2] = 0x01;
+
+	rockchip_tx_i2c0(cmd, 3);
+}
+
+/*
+ * Reset system using RK808
+ * I2C0 must be initialized.
+ *
+ * Any other peripherals should be switched off before.
+ *
+ */
+
+#define BCD2BIN(val) (((val) & 0x0F) + (((val) >> 4) * 10))
+#define BIN2BCD(val) (((val) % 10) | (((val) / 10) << 4))
+
+void rockchip_rk808_reset()
+{
+	uint8_t ctrl;
+	uint8_t buf[8];
+	uint8_t hour, minute, second;
+	uint8_t day, month;
+	uint32_t year;
+
+	/* Configure rk808 device address */
+	buf[0] = RK808_I2C_ADDRESS << 1;
+
+	/* Read RTC control register */
+	if (rockchip_rx_i2c0(RK808_I2C_ADDRESS, 0x10, &ctrl, 1) < 0) {
+		return;
+	}
+
+	/* Clear GET_TIME and STOP_RTC. Enable reading shadow registers */
+	ctrl = (ctrl & 0xBE) | 0x80;
+
+	/* We will not do a reset over midnight, because the rk808 has a broken
+	 * calender according to linux driver. So we have to wait at midnight. */
+	while (1) {
+		/* Configure accessing shadow registers and clear GET_TIME and STOP_RTC */
+		buf[1] = 0x10;	/* RTC_CTRL_REG */
+		buf[2] = ctrl;
+		rockchip_tx_i2c0(buf, 3);
+
+		/* Disable RTC interrupts. We do it here to give the RTC some time to
+		 * process lowering GET_TIME and STOP_RTC */
+		buf[1] = 0x12;	/* RTC_INT_REG */
+		buf[2] = 0x00;
+		rockchip_tx_i2c0(buf, 3);
+
+		/* Now raise GET_TIME to latch current time in shadow registers
+		 * Clear all RTC interrupts */
+		buf[1] = 0x10;	/* RTC_CTRL_REG */
+		buf[2] = ctrl | 0x40;
+		buf[3] = 0xFC;
+		rockchip_tx_i2c0(buf, 4);
+
+		/* Configure interrupt mask registers. Only enable RTC interrupt */
+		buf[1] = 0x4D;	/* INT_MSK_REG1 */
+		buf[2] = 0x5F;
+		rockchip_tx_i2c0(buf, 3);
+
+		buf[1] = 0x4F;	/* INT_MSK_REG2 */
+		buf[2] = 0x03;
+		rockchip_tx_i2c0(buf, 3);
+
+		/* Lower GET_TIME */
+		buf[1] = 0x10;	/* RTC_CTRL_REG */
+		buf[2] = ctrl;
+		rockchip_tx_i2c0(buf, 3);
+
+		/* Read out current time */
+		if (rockchip_rx_i2c0(RK808_I2C_ADDRESS, 0x00, buf, 6) < 0) {
+			return;
+		}
+		second = BCD2BIN(buf[0] & 0x7F);
+		minute = BCD2BIN(buf[1] & 0x7F);
+		hour = BCD2BIN(buf[2] & 0x3F);
+		if (ctrl & 0x08) {		/* AM/PM mode */
+			if (hour & 0x80) {	/* PM */
+				if (hour > 12) {
+					hour += 12;
+				}
+			} else {		/* AM */
+				if (hour == 12) {
+					hour = 0;
+				}
+			}
+		}
+		day = BCD2BIN(buf[3] & 0x3F);
+		month = BCD2BIN(buf[4] & 0x1F);
+		year = BCD2BIN(buf[5]) + 2000;
+
+		/* Avoid day change */
+		if ( (hour < 23) || (minute < 59) || (second < 54) ) {
+			break;
+		}
+
+		mdelay(1000);
+	}
+
+	/* Add 5 seconds to current time */
+	second += 5;
+	if (second >= 60) {
+		second -= 60;
+		minute++;
+		if (minute >= 60) {
+			minute -= 60;
+			hour++; /* Day overflow cannot happen */
+		}
+	}
+
+	/* Configure alarm time */
+	buf[0] = RK808_I2C_ADDRESS << 1;
+	buf[1] = 0x08;	/* ALARM_SECONDS_REGISTER */
+	buf[2] = BIN2BCD(second);
+	buf[3] = BIN2BCD(minute);
+	if (ctrl & 0x08) {	/* AM/PM */
+		if (hour != 0) {
+			if (hour >= 12) {
+				if (hour == 12) {
+					buf[4] = 0x92;
+				} else {
+					buf[4] = 0x80 | BIN2BCD(hour - 12);
+				}
+			} else {
+				buf[4] = BIN2BCD(hour);
+			}
+		} else {
+			buf[4] = 0x12;
 		}
-		gpio_set_direction(poweroff_gpio->index, GPIO_DIR_OUT);
-		gpio_set_value(poweroff_gpio->index, poweroff_gpio->polarity);
 	} else {
-		WARN("Do nothing when system off\n");
+		buf[4] = BIN2BCD(hour);
 	}
+	buf[5] = BIN2BCD(day);
+	buf[6] = BIN2BCD(month);
+	buf[7] = BIN2BCD(year - 2000);
+	rockchip_tx_i2c0(buf, 8);
+
+	/* Enable alarm RTC interrupt */
+	buf[1] = 0x12;	/* RTC_INT_REG */
+	buf[2] = 0x08;
+	rockchip_tx_i2c0(buf, 3);
+
+	/* Power off and hope the RTC will wake us up */
+	buf[1] = 0x4B;
+	buf[2] = 0x08;
+	rockchip_tx_i2c0(buf, 3);
+
+	return;
+}
+
+/*
+ * The rock pi 4 has some power switches which are not connected to
+ * the main power regulator rk808 but get there power directly from an 
+ * always on regulator. These switches can be controlled via gpios.
+ */
+
+#define ROCKPI4_VCC5V0_HOST_EN		(4 * 32 + 3 * 8 + 1)	/* GPIO 4, D, 1 */
+#define ROCKPI4_VCC5V0_TYPEC0_EN	(1 * 32 + 0 * 8 + 3)	/* GPIO 1, A, 3 */
+#define ROCKPI4_USER_LED		(3 * 32 + 3 * 8 + 5)	/* GPIO 3, D, 5 */
+void rockchip_rockpi4_extra_peripheral_off(void)
+{
+	/* Directly connected switches */
+	/* Power for all USB ports but the OTG port */
+	mmio_write_32(GRF_BASE + GRF_GPIO4D_IOMUX, 0x000C0000);	/* Select GPIO function */
+	mmio_write_32(GRF_BASE + GRF_GPIO4D_P, 0x000C0008);	/* Pull down */
+	gpio_set_direction(ROCKPI4_VCC5V0_HOST_EN, GPIO_DIR_OUT);
+	gpio_set_value(ROCKPI4_VCC5V0_HOST_EN, GPIO_LEVEL_LOW);
+
+	/* Power for OTG USB port */
+	mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1A_IOMUX, 0x00C00000);	/* Select GPIO function */
+	mmio_write_32(PMUGRF_BASE + PMUGRF_GPIO1A_P, 0x00C00080);	/* Pull down */
+	gpio_set_direction(ROCKPI4_VCC5V0_TYPEC0_EN, GPIO_DIR_OUT);
+	gpio_set_value(ROCKPI4_VCC5V0_TYPEC0_EN, GPIO_LEVEL_LOW);
+
+	/* Directly controlled by CPU */
+	/* Power for user LED */
+	mmio_write_32(GRF_BASE + GRF_GPIO3D_IOMUX, 0x0C000000);	/* Select GPIO function */
+	mmio_write_32(GRF_BASE + GRF_GPIO3D_P, 0x0C000800);	/* Pull down */
+	gpio_set_direction(ROCKPI4_USER_LED, GPIO_DIR_OUT);
+	gpio_set_value(ROCKPI4_USER_LED, GPIO_LEVEL_LOW);
+}
+
+void __dead2 rockchip_soc_soft_reset(void)
+{
+	rockchip_init_i2c0();
+	rockchip_rockpi4_extra_peripheral_off();
+	rockchip_rk808_reset();
+
+	soc_global_soft_reset();
+
+	while (1)
+		;
+}
+
+void __dead2 rockchip_soc_system_off(void)
+{
+	rockchip_init_i2c0();
+	rockchip_rockpi4_extra_peripheral_off();
+	rockchip_rk808_poweroff();
 
 	while (1)
 		;
diff -Naurp atf-source-v2.4.orig/plat/rockchip/rk3399/include/shared/addressmap_shared.h atf-source-v2.4.patched/plat/rockchip/rk3399/include/shared/addressmap_shared.h
--- atf-source-v2.4.orig/plat/rockchip/rk3399/include/shared/addressmap_shared.h	2020-12-21 12:11:28.724340934 +0100
+++ atf-source-v2.4.patched/plat/rockchip/rk3399/include/shared/addressmap_shared.h	2020-12-21 12:15:51.894331701 +0100
@@ -27,6 +27,7 @@
 #define PMUGRF_BASE		(MMIO_BASE + 0x07320000)
 #define SGRF_BASE		(MMIO_BASE + 0x07330000)
 #define PMUSRAM_BASE		(MMIO_BASE + 0x073B0000)
+#define I2C0_BASE		(MMIO_BASE + 0x073C0000)
 #define PWM_BASE		(MMIO_BASE + 0x07420000)
 
 #define CIC_BASE		(MMIO_BASE + 0x07620000)
diff -Naurp atf-source-v2.4.orig/plat/rockchip/rk3399/include/shared/i2c_regs.h atf-source-v2.4.patched/plat/rockchip/rk3399/include/shared/i2c_regs.h
--- atf-source-v2.4.orig/plat/rockchip/rk3399/include/shared/i2c_regs.h	1970-01-01 01:00:00.000000000 +0100
+++ atf-source-v2.4.patched/plat/rockchip/rk3399/include/shared/i2c_regs.h	2020-12-21 12:15:51.894331701 +0100
@@ -0,0 +1,29 @@
+/* Rockchip I2C registers */
+
+#define RKI2C_CON			0x0000
+#define RKI2C_CLKDIV			0x0004
+#define RKI2C_MRXADDR			0x0008
+#define RKI2C_MRXRADDR			0x000C
+#define RKI2C_MTXCNT			0x0010
+#define RKI2C_MRXCNT			0x0014
+#define RKI2C_IEN			0x0018
+#define RKI2C_IPD			0x001C
+#define RKI2C_FCNT			0x0020
+#define RKI2C_SCL_OE_DB			0x0024
+#define RKI2C_TXDATA0			0x0100
+#define RKI2C_TXDATA1			0x0104
+#define RKI2C_TXDATA2			0x0108
+#define RKI2C_TXDATA3			0x010C
+#define RKI2C_TXDATA4			0x0110
+#define RKI2C_TXDATA5			0x0114
+#define RKI2C_TXDATA6			0x0118
+#define RKI2C_TXDATA7			0x011C
+#define RKI2C_RXDATA0			0x0200
+#define RKI2C_RXDATA1			0x0204
+#define RKI2C_RXDATA2			0x0208
+#define RKI2C_RXDATA3			0x020C
+#define RKI2C_RXDATA4			0x0210
+#define RKI2C_RXDATA5			0x0214
+#define RKI2C_RXDATA6			0x0218
+#define RKI2C_RXDATA7			0x021C
+#define RKI2C_ST			0x0220
diff -Naurp atf-source-v2.4.orig/plat/rockchip/rk3399/include/shared/pmu_regs.h atf-source-v2.4.patched/plat/rockchip/rk3399/include/shared/pmu_regs.h
--- atf-source-v2.4.orig/plat/rockchip/rk3399/include/shared/pmu_regs.h	2020-12-21 12:11:28.724340934 +0100
+++ atf-source-v2.4.patched/plat/rockchip/rk3399/include/shared/pmu_regs.h	2020-12-21 12:15:51.894331701 +0100
@@ -66,7 +66,16 @@
 
 #define PMUGRF_GPIO0A_IOMUX	0x00
 #define PMUGRF_GPIO1A_IOMUX	0x10
+#define PMUGRF_GPIO1B_IOMUX	0x14
 #define PMUGRF_GPIO1C_IOMUX	0x18
+#define PMUGRF_GPIO1D_IOMUX	0x1C
+
+#define PMUGRF_GPIO0A_P		0x40
+#define PMUGRF_GPIO0B_P		0x44
+#define PMUGRF_GPIO1A_P		0x50
+#define PMUGRF_GPIO1B_P		0x54
+#define PMUGRF_GPIO1C_P		0x58
+#define PMUGRF_GPIO1D_P		0x5C
 
 #define PMUGRF_GPIO0A6_IOMUX_SHIFT      12
 #define PMUGRF_GPIO0A6_IOMUX_PWM        0x1
