diff -Naurp orig/drivers/regulator/core.c patched/drivers/regulator/core.c
--- orig/drivers/regulator/core.c	2020-02-01 11:35:28.147469123 +0100
+++ patched/drivers/regulator/core.c	2020-02-02 15:28:05.474324297 +0100
@@ -1599,12 +1599,14 @@ static struct regulator *create_regulato
 		if (regulator->supply_name == NULL)
 			goto overflow_err;
 
-		err = sysfs_create_link_nowarn(&rdev->dev.kobj, &dev->kobj,
-					buf);
-		if (err) {
-			rdev_dbg(rdev, "could not add device link %s err %d\n",
-				  dev->kobj.name, err);
-			/* non-fatal */
+		if (device_is_registered(dev)) {
+			err = sysfs_create_link_nowarn(&rdev->dev.kobj, &dev->kobj,
+						buf);
+			if (err) {
+				rdev_dbg(rdev, "could not add device link %s err %d\n",
+					  dev->kobj.name, err);
+				/* non-fatal */
+			}
 		}
 	} else {
 		regulator->supply_name = kstrdup_const(supply_name, GFP_KERNEL);
@@ -5182,6 +5184,18 @@ regulator_register(const struct regulato
 		goto unset_supplies;
 	}
 
+	/* Add a link to the devie sysfs entry */
+	if (rdev->supply && rdev->supply->dev) {
+		ret = sysfs_create_link_nowarn(&rdev->supply->dev->kobj,
+					       &rdev->dev.kobj,
+					       rdev->supply->supply_name);
+		if (ret) {
+			rdev_dbg(rdev, "could not add device link %s err %d\n",
+				 rdev->dev.kobj.name, ret);
+			/* non-fatal */
+		}
+	}
+
 	rdev_init_debugfs(rdev);
 
 	/* try to resolve regulators coupling since a new one was registered */
